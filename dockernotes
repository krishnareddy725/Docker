sudo yum install -y docker
systemctl start docker
systemctl enable docker
usermod -aG docker ec2-user ==> logout and login after this all docker commands should work in "ec2-user"

sudo yum install git -yum

docker pull nginx ==> it will download the latest version image

docker pull nginx:1.26.2-otel ==> to download the specific version/tag

dockerhub.com

docker images

docker images -a -q ==> to see all docker images

docker rmi `docker images -a -q` ==> to delete the all docker images

docker rm -f `docker ps -a -q` ==> to delete the all running containers forcefully.

docker create nginx:latest ==> to create the container

docker start CONTAINER ID ==> to start the container

docker ps -a ==> to see all containers

docker exec -it 80555cba63f0 bash ==> to login to the container



docker login
Username: vvkr
password:jan!725123

once successfully logged into the docker we can push our own build docker images to docker hub.

docker build -t from:v1 . ==> it will build the docker image locally

docker tag from:v1 vvkr/from:v1 ==> retag the image to push docker hub

docker push vvkr/from:v1 ==> it will push our image to docker, here by default docker hub will take else another repositart url.

docker images --filter label=TRAINER=Sivakumar ==> to filter the exact image in all images.

docker ps -a --no-trunc ==>command is used to list all Docker containers, both running and stopped, with detailed information that isn't truncated.

docker build -t arg1:v1 . --build-arg username=krishna --build-arg course=devops --build-arg trainer=krishna ==> arg practice

docker run -d --name mongodb mongodb:v1 ==> creating the container with name

docker logs containername ==> to check the container logs

docker inspect containername/id ==> to see ip address/ volume of the container

docker network create roboshop ==> to create the own network for each project.

docker network ls ==> to check the docker networks

docker run -d --name mongodb --network=roboshop mongodb:v1 ==> to create the container with name and also attach the network.

docker run -d -p 8080:80 --name web --network=roboshop web:v1 ==> opening the port to web and also attching to roboshop network.

docker compose installation
===========================
sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
docker-compose.yaml ==> is the default file

docker-compose up -d ==> to create all containers at a time by useing compose

docker-compose down ==> to bring down all running containers





